int	dp[266][266];
int	arr[266] = {0, 3, 4, 5, 8, 9, 10, 11, 13, 15, 19, 20, 21, 24, 31, 33, 34, 40, 45, 46, 55, 57, 58, 59, 64, 66, 67, 73, 75, 77, 79, 80, 82, 86, 90, 93, 95, 96, 102, 108, 110, 111, 114, 117, 118, 119, 124, 130, 133, 138, 149, 153, 156, 157, 164, 165, 166, 167, 171, 172, 181, 182, 187, 188, 192, 204, 207, 210, 211, 213, 214, 215, 217, 219, 220, 222, 224, 225, 227, 229, 230, 231, 239, 241, 243, 244, 247, 248, 250, 252, 253, 260, 262, 264, 265, 270, 272, 278, 282, 286, 287, 288, 289, 291, 294, 298, 300, 312, 313, 314, 317, 319, 320, 322, 323, 324, 326, 331, 334, 338, 340, 342, 343, 345, 348, 357, 367, 370, 372, 373, 375, 377, 379, 381, 382, 386, 387, 390, 391, 401, 402, 404, 406, 409, 416, 417, 426, 432, 433, 436, 438, 439, 441, 446, 449, 450, 453, 457, 458, 460, 466, 472, 475, 483, 485, 487, 488, 491, 492, 493, 494, 495, 498, 500, 502, 504, 507, 510, 511, 513, 516, 517, 519, 520, 521, 526, 528, 535, 540, 542, 547, 551, 554, 564, 566, 569, 574, 577, 591, 593, 598, 602, 603, 605, 610, 611, 616, 617, 619, 623, 624, 625, 629, 633, 639, 643, 645, 646, 647, 648, 649, 652, 658, 659, 662, 663, 664, 669, 672, 679, 680, 685, 692, 701, 704, 705, 707, 708, 710, 713, 728, 732, 733, 735, 737, 741, 742, 744, 749, 752, 762, 763, 764, 765, 767, 771, 773, 776, 777, 780, 781, 782, 787, 793, 796, 797};

int lenLongestFibSubseq(int arrSize){
    int i = 1, ret = 0;
    while( i < arrSize ){
        int j;
        j = i+1;
        while( j < arrSize ){
            if( arr[j] > (2*arr[i]) ){
                break;
            }

            int target, left, right, prev, mid;
            target = arr[j] - arr[i];
            left   = 0; 
            right  = i - 1;
            prev   = -1;

            while( left <= right ){
                mid = (right - left) / 2 + left;
                if( arr[mid] == target ){
                    prev  = mid;
                    break;
                } else
                if( arr[mid] < target ){
                    left  = mid + 1;
                } else {
                    right = mid - 1;
                }
            }

            if( prev >= 0 ){
                dp[i][j] = dp[prev][i] + 1;
                if( dp[i][j] < 3 ){
                    dp[i][j] = 3;
                }
                if( dp[i][j] > ret){
                    ret = dp[i][j];
                }
            }
            j = j + 1;
        }
        i = i + 1;
    }

    return ret;
}

int main(){
    int s, r;
    s = get_int();

    r = lenLongestFibSubseq(s);
    print_int(r);

    return 0;
}
